name: Deploy to Google Cloud Functions

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    name: Deploy Cloud Functions
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests  # Needed for API tests
          pip install pytest  # For future testing

      # Create service account key file from secret
      - name: Create service account key file
        run: echo '${{ secrets.GCP_SA_KEY }}' > sa-key.json

      # Authenticate with explicit path to key file
      - name: Authenticate to Google Cloud
        run: |
          gcloud auth activate-service-account --key-file=sa-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      # Deploy Functions - assumes all APIs are already enabled manually
      - name: Deploy Appointment Types Service
        run: |
          gcloud functions deploy appointment-types-service \
            --gen2 \
            --runtime python311 \
            --trigger-http \
            --allow-unauthenticated \
            --entry-point appointment_types_service \
            --source . \
            --region us-central1 \
            --set-env-vars FIREBASE_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy Providers Service
        run: |
          gcloud functions deploy providers-service \
            --gen2 \
            --runtime python311 \
            --trigger-http \
            --allow-unauthenticated \
            --entry-point providers_service \
            --source . \
            --region us-central1 \
            --set-env-vars FIREBASE_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy Customers Service
        run: |
          gcloud functions deploy customers-service \
            --gen2 \
            --runtime python311 \
            --trigger-http \
            --allow-unauthenticated \
            --entry-point customers_service \
            --source . \
            --region us-central1 \
            --set-env-vars FIREBASE_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy Appointments Service
        run: |
          gcloud functions deploy appointments-service \
            --gen2 \
            --runtime python311 \
            --trigger-http \
            --allow-unauthenticated \
            --entry-point appointments_service \
            --source . \
            --region us-central1 \
            --set-env-vars FIREBASE_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
            
      - name: Output Service URLs
        id: output_urls
        run: |
          APPT_TYPES_URL=$(gcloud functions describe appointment-types-service --region us-central1 --format='value(serviceConfig.uri)')
          PROVIDERS_URL=$(gcloud functions describe providers-service --region us-central1 --format='value(serviceConfig.uri)')
          CUSTOMERS_URL=$(gcloud functions describe customers-service --region us-central1 --format='value(serviceConfig.uri)')
          APPOINTMENTS_URL=$(gcloud functions describe appointments-service --region us-central1 --format='value(serviceConfig.uri)')
          
          echo "APPT_TYPES_URL=$APPT_TYPES_URL" >> $GITHUB_OUTPUT
          echo "PROVIDERS_URL=$PROVIDERS_URL" >> $GITHUB_OUTPUT
          echo "CUSTOMERS_URL=$CUSTOMERS_URL" >> $GITHUB_OUTPUT
          echo "APPOINTMENTS_URL=$APPOINTMENTS_URL" >> $GITHUB_OUTPUT
          
          echo "Appointment Types Service: $APPT_TYPES_URL"
          echo "Providers Service: $PROVIDERS_URL"
          echo "Customers Service: $CUSTOMERS_URL"
          echo "Appointments Service: $APPOINTMENTS_URL"
          
      # Run API tests to verify deployment and populate the database
      - name: Run API Tests
        env:
          APPT_TYPES_URL: ${{ steps.output_urls.outputs.APPT_TYPES_URL }}
          PROVIDERS_URL: ${{ steps.output_urls.outputs.PROVIDERS_URL }}
          CUSTOMERS_URL: ${{ steps.output_urls.outputs.CUSTOMERS_URL }}
          APPOINTMENTS_URL: ${{ steps.output_urls.outputs.APPOINTMENTS_URL }}
        run: |
          # Add a short delay to ensure all functions are fully deployed and ready
          echo "Waiting for functions to be fully deployed..."
          sleep 30
          
          echo "Running API tests to verify deployment and populate database..."
          python test_api.py

      # Cleanup service account key file
      - name: Remove service account key file
        if: always()
        run: rm -f sa-key.json 